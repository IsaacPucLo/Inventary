@using Entities
@using Business

<div class="form-group">
    <label>Bodegas:</label>
    <select class="form-control" @onchange="OnChangedWarehouse">
        <option>Seleccione una bodega...</option>
        @foreach (var warehouse in warehouses) {
            <option value="@warehouse.WarehouseId">@warehouse.WarehouseName</option>
        }
    </select>
</div>

<hr />

<EditForm Model="oInOut">
    <div class="form-group">
        <label>Producto</label>
        <InputSelect class="form-control" @bind-Value="oInOut.StorageId">
            <option value="">Seleccione producto...</option>
            @foreach (var storage in storages) {
                <option value="@storage.StorageId">@storage.Product.ProductName</option>//Se pueden tener los datos del producto gracias al Include realizado en la función OnChangedWarehouse
            }
        </InputSelect>
    </div>

    <div class="form-group">
        <label>Cantidad</label>
        <InputNumber class="form-control" @bind-Value="oInOut.Quantity" />
    </div>
    <div class="form-group">
        <label>Es un ingreso ?</label>
        <InputCheckbox class="form-control" @bind-Value="oInOut.IsInput" />
    </div>
    <div>
        <input type="button" value="@buttonValue" @onclick="SaveInOut" class="form-control btn btn-warning" />
    </div>
</EditForm>

@code{
    InOutEntity oInOut = new InOutEntity();
    List<WarehouseEntity> warehouses = new List<WarehouseEntity>();
    List<StorageEntity> storages = new List<StorageEntity>();
    //ProductEntity oProduct = new ProductEntity();
    //StorageEntity oStorage = new StorageEntity();

    string buttonValue => oInOut.IsInput ? "Registrar Entrada" : "Registrar Salida";

    protected override async Task OnInitializedAsync() {
        warehouses = B_Warehouse.WarehouseList();
    }

    private void OnChangedWarehouse(ChangeEventArgs e) {

        var idWarehouse = e.Value.ToString();
        storages = B_Storage.StorageProductByWarehouse(idWarehouse);
    }

    private void SaveInOut() {
        var quantity = oInOut.Quantity;
        var oStorage = storages.LastOrDefault(s => s.StorageId == oInOut.StorageId);
        var product = oStorage.Product;
    }


}