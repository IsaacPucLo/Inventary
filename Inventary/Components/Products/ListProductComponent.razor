@using Entities;
@using Business;

<hr />
<select class="form-control" @onchange="CategoryChanged">   <!--Es un evento, quiere decir que cuando el valor 
                                                             del select cambia ocurre o se ejecuta esa función o acción-->
    <option value="">Seleccione categoría...</option>   <!--Muestra el mensaje por defecto (al ejecutar el select)-->
    @foreach (var category in categories) {
        <option value="@category.CategoryId">@category.CategoryName</option>
    }
</select>
<hr />


<table class="table table-hover table-bordered">
    <thead>
        <tr>
            <th>Referencia</th>
            <th>Nombre del producto</th>
            <th>Categoría</th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var product in tempProducts) {
        <tr>
            <td>@product.ProductId</td>
            <td>@product.ProductName</td>
            <td>@product.CategoryId</td>
            <td><a href="product/update/@product.ProductId">Editar</a></td> <!--Pasamos el parametro del Id al momento de ir a la página-->

        </tr>
         }
    </tbody>
</table>




@code {
    List<ProductEntity> products = new List<ProductEntity>();
    List<ProductEntity> tempProducts = new List<ProductEntity>();
    List<CategoryEntity> categories = new List<CategoryEntity>();

    protected override async Task OnInitializedAsync() {
        products = B_Product.ProductList();
        tempProducts = products;
        categories = B_Category.CategoryList();
    }

    private void CategoryChanged(ChangeEventArgs e) {       ///tomamos el cambio que se haya efectuado con esa sentencia
        tempProducts= products.Where(c => c.CategoryId == e.Value.ToString()).ToList();
    }
}
